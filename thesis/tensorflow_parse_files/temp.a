import json
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf

def train(num_steps,batch_size,noise_dim,disc_input,gen_input,sess,train_gen,train_disc,gen_loss,disc_loss,mnist):
    for i in range(1, 1 + 1):
        # Prepare Data
        # Get the next batch of MNIST data (only images are needed, not labels)
        batch_x, _ = mnist.train.next_batch(batch_size)
        # Generate noise to feed to the generator
        z = np.random.uniform(-1., 1., size=[batch_size, noise_dim])

        # Train
        feed_dict = {disc_input: batch_x, gen_input: z}
        _, _, gl, dl = sess.run([train_gen, train_disc, gen_loss, disc_loss],
                                feed_dict=feed_dict)
        with open('temporary_train.py_0.info', 'w') as json_file:
         json.dump(locals(), json_file)
        f = open(temporary_train.py_0.lines, 'a')
        f.write('_,_,gl,dl=sess.run([train_gen,train_disc,gen_loss,disc_loss],feed_dict=feed_dict)')
        f.close()
        print(locals())
        if i % 1000 == 0 or i == 1:
            print('Step %i: Generator Loss: %f, Discriminator Loss: %f' % (i, gl, dl))


def malakia():
    for i in range(1, 1 + 1):
        # Prepare Data
        # Get the next batch of MNIST data (only images are needed, not labels)
        batch_x, _ = mnist.train.next_batch(batch_size)
        # Generate noise to feed to the generator
        z = np.random.uniform(-1., 1., size=[batch_size, noise_dim])

        # Train
        feed_dict = {disc_input: batch_x, gen_input: z}
        _, _, gl, dl = sess.run([train_gen, train_disc, gen_loss, disc_loss],
                                feed_dict=feed_dict)
        with open('temporary_train.py_1.info', 'w') as json_file:
         json.dump(locals(), json_file)
        f = open(temporary_train.py_1.lines, 'a')
        f.write('_,_,gl,dl=sess.run([train_gen,train_disc,gen_loss,disc_loss],feed_dict=feed_dict)')
        f.close()
        print(locals())
        if i % 1000 == 0 or i == 1:
            print('Step %i: Generator Loss: %f, Discriminator Loss: %f' % (i, gl, dl))